export interface DataSetMaps {
  primaryIndex: Record<string, Record<string, any>>,
  [key: string]: Record<string, string | Record<string, string>>,
}

export type Block =
  | { type: 'header', data: { source: string } }
  | { type: 'maps.cjs', data: Record<string, Record<string, string | Record<string, string>>> }
  // | { type: 'enum-types.ts', data: Record<string, Record<string, string>> }
  | { type: 'union-types.d.ts', data: Record<string, string[]> }
  | { type: 'data.md', data: { source: string, head: string[], rows: string[][] } }

export function buildFile(blocks: Block[]): string {
  return blocks.map(({ type, data }) => {
    switch (type) {
      case 'header': return (a => a.join('\n'))([
        '/**',
        ' * @NOTE: DO NOT EDIT THIS FILE DIRECTLY - this file was auto-generated',
        ` * @LINK: https://github.com/someimportantcompany/data-sets/blob/main/${data.source}`,
        ` * @LAST-MODIFIED: ${new Date().toISOString()}`,
        ' */',
      ]);

      case 'maps.cjs': return Object.entries(data)
        .reduce((lines: string[], [ name, map ]) => lines.concat([
          `module.exports.${name} = (new Map())`,
          Object.entries(map).map(([ key, value ]) => `.set(${JSON.stringify(key)}, ${JSON.stringify(value)})`, []).join(''),
        ]), [])
        .join('\n');

        // case 'enum-types.ts': return Object.entries(data)
        //   .reduce((lines: string[], [name, map]) => lines.concat([
        //     `export enum ${name} = {`,
        //     Object.entries(map).map(([key, value]) => `  "${key}" = "${value}",`, []).join('\n'),
        //     '};',
        //   ]), [])
        //   .join('\n');

      case 'union-types.d.ts': return Object.entries(data)
        .reduce((lines: string[], [ name, values ]) => lines.concat([
          `export type ${name} =`,
          values.map(value => `  | ${JSON.stringify(value)}`).join('\n'),
        ]), [])
        .join('\n');

      case 'data.md': {
        const { head, rows } = data;
        return [
          head.join(' | '),
          head.map(() => '----').join(' | '),
          rows.map(row => row.join(' | ')).join('\n'),
        ].join('\n');
      }

      default: return '';
    }
  }).join('\n');
}
